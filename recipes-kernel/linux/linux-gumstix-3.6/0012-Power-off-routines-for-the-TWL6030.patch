From 8d0c220ee93232082e03d1f15b6384bd1f6c8734 Mon Sep 17 00:00:00 2001
From: Conor O'Rourke <falling174fps@gmail.com>
Date: Thu, 24 Apr 2014 11:54:13 +0100
Subject: [PATCH 12/12] Power off routines for the TWL6030

---
 drivers/mfd/Kconfig    |  6 ++++
 drivers/mfd/twl-core.c | 93 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 99 insertions(+)

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index b1a1462..ffaf889 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -298,6 +298,12 @@ config MFD_TWL4030_AUDIO
 	select MFD_CORE
 	default n
 
+config TWL4030_POWEROFF
+	bool "TWL4030/TWL6030 Allow power-off on shutdown"
+	depends on TWL4030_CORE
+	help
+	  Enables the CPU to power-off the system on shutdown.
+
 config TWL6030_PWM
 	tristate "TWL6030 PWM (Pulse Width Modulator) Support"
 	depends on TWL4030_CORE
diff --git a/drivers/mfd/twl-core.c b/drivers/mfd/twl-core.c
index 1c32afe..eb08a9b 100644
--- a/drivers/mfd/twl-core.c
+++ b/drivers/mfd/twl-core.c
@@ -88,6 +88,13 @@
 #define twl_has_madc()	false
 #endif
 
+#if defined(CONFIG_SENSORS_TWL4030_MADC) ||\
+	 defined(CONFIG_SENSORS_TWL4030_MADC_MODULE)
+#define twl_has_madc_hwmon()  true
+#else
+#define twl_has_madc_hwmon()  false
+#endif
+
 #ifdef CONFIG_TWL4030_POWER
 #define twl_has_power()        true
 #else
@@ -127,6 +134,12 @@
 #define twl_has_bci()	false
 #endif
 
+#if defined (CONFIG_TWL4030_POWEROFF)
+#define twl_has_poweroff()	true
+#else
+#define twl_has_poweroff()	false
+#endif
+
 /* Triton Core internal information (BEGIN) */
 
 /* Last - for index max*/
@@ -224,6 +237,15 @@
 #define HIGH_PERF_SQ			(1 << 3)
 #define CK32K_LOWPWR_EN			(1 << 7)
 
+/* for pm_power_off */
+#define PWR_P1_SW_EVENTS	0x10
+#define PWR_DEVOFF		(1 << 0)
+
+#define TWL6030_PHOENIX_DEV_ON	0x25
+#define TWL6030_APP_DEVOFF	(1<<0)
+#define TWL6030_CON_DEVOFF	(1<<1)
+#define TWL6030_MOD_DEVOFF	(1<<2)
+
 /*----------------------------------------------------------------------*/
 
 /* is driver active, bound to a chip? */
@@ -693,6 +715,14 @@ add_children(struct twl4030_platform_data *pdata, unsigned irq_base,
 			return PTR_ERR(child);
 	}
 
+	if (twl_has_madc_hwmon()) {
+		child = add_child(2, "twl4030_madc_hwmon",
+				NULL, 0,
+				true, irq_base + MADC_INTR_OFFSET, 0);
+		if (IS_ERR(child))
+			return PTR_ERR(child);
+	}
+
 	if (twl_has_rtc()) {
 		/*
 		 * REVISIT platform_data here currently might expose the
@@ -1214,6 +1244,60 @@ static int twl_remove(struct i2c_client *client)
 	return 0;
 }
 
+static void twl_4030_poweroff(void)
+{
+	int err;
+	u8 val;
+
+	err = twl_i2c_read_u8(TWL4030_MODULE_PM_MASTER, &val,
+				  PWR_P1_SW_EVENTS);
+	if (err) {
+		pr_err("%s: i2c error %d while reading TWL4030"
+			"PM_MASTER P1_SW_EVENTS\n",
+			DRIVER_NAME, err);
+		return;
+	}
+
+	val |= PWR_DEVOFF;
+
+	err = twl_i2c_write_u8(TWL4030_MODULE_PM_MASTER, val,
+				   PWR_P1_SW_EVENTS);
+	if (err)
+		pr_err("%s: i2c error %d while writing TWL4030"
+			"PM_MASTER P1_SW_EVENTS\n",
+			DRIVER_NAME, err);
+}
+
+static void twl_6030_poweroff(void)
+{
+	int err;
+	u8 val;
+
+	err = twl_i2c_read_u8(TWL6030_MODULE_ID0, &val,
+	                      TWL6030_PHOENIX_DEV_ON);
+	if (err) {
+		pr_err("%s: i2c error %d while reading TWL6030"
+		       "MODULE_ID0 PHOENIX_DEV_ON\n",
+		       DRIVER_NAME, err);
+		return;
+	}
+
+	val |= TWL6030_APP_DEVOFF;
+	val |= TWL6030_CON_DEVOFF;
+	val |= TWL6030_MOD_DEVOFF;
+
+	err = twl_i2c_write_u8(TWL6030_MODULE_ID0, val,
+	                       TWL6030_PHOENIX_DEV_ON);
+
+	if (err) {
+		pr_err("%s: i2c error %d while writing TWL6030"
+		       "MODULE_ID0 PHOENIX_DEV_ON\n",
+		       DRIVER_NAME, err);
+	}
+
+	return;
+}
+
 /* NOTE: This driver only handles a single twl4030/tps659x0 chip */
 static int __devinit
 twl_probe(struct i2c_client *client, const struct i2c_device_id *id)
@@ -1324,6 +1408,15 @@ twl_probe(struct i2c_client *client, const struct i2c_device_id *id)
 		twl_i2c_write_u8(TWL4030_MODULE_INTBR, temp, REG_GPPUPDCTR1);
 	}
 
+	if (twl_has_poweroff())
+	{
+		/* initialize pm_power_off routine */
+		if (twl_class_is_6030())
+			pm_power_off = twl_6030_poweroff;
+		else
+			pm_power_off = twl_4030_poweroff;
+	}
+
 	status = -ENODEV;
 	if (node)
 		status = of_platform_populate(node, NULL, NULL, &client->dev);
-- 
1.8.3.2

