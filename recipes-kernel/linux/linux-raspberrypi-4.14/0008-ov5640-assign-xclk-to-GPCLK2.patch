diff --git a/arch/arm/boot/dts/overlays/ov5640-gumstix-overlay.dts b/arch/arm/boot/dts/overlays/ov5640-gumstix-overlay.dts
index 1b23d3e..337cdc7 100644
--- a/arch/arm/boot/dts/overlays/ov5640-gumstix-overlay.dts
+++ b/arch/arm/boot/dts/overlays/ov5640-gumstix-overlay.dts
@@ -22,13 +22,8 @@
 				powerdown-gpios = <&gpio 17 0>;
 				reset-gpios = <&gpio 16 1>;
 				clock-names = "xclk";
-				clocks = <&ov5640_clk>;
-
-				ov5640_clk: camera-clk {
-					compatible = "fixed-clock";
-					#clock-cells = <0>;
-					clock-frequency = <24000000>;
-				};
+				clocks = <&clocks 40>; //40 is BCM2835_CLOCK_GP2
+				clock-frequency = <24000000>;
 
 				port {
 					ov5640_0: endpoint {
@@ -68,16 +63,13 @@
         __overlay__ {
             ov5640_default: pinmux_ov5640_default {
                 brcm,pins = <
+                	6
                     16 /* gpio16.reset-gpios */
                     17 /* gpio17.powerdown-gpios */
                 >;
-            	brcm,function = <0>;
-            	brcm,pull = <2 1>;
+            	brcm,function = <4 0 0>;
+            	brcm,pull = <0 2 1>;
             };
         };
     };
-/*	__overrides__ {
-		cam0-pwdn = <&ov5640>,"powerdown-gpios:4";
-		cam0-led = <&ov5640>,"pwdn-gpios:16";
-	};*/
 };
diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index 39a2269..9b4b10b 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -2208,6 +2208,7 @@ static int ov5640_probe(struct i2c_client *client,
 	struct device *dev = &client->dev;
 	struct fwnode_handle *endpoint;
 	struct ov5640_dev *sensor;
+	u32 xclk_freq;
 	int ret;
 
 	sensor = devm_kzalloc(dev, sizeof(*sensor), GFP_KERNEL);
@@ -2254,7 +2255,23 @@ static int ov5640_probe(struct i2c_client *client,
 		return PTR_ERR(sensor->xclk);
 	}
 
+
+	ret = of_property_read_u32(dev->of_node, "clock-frequency", &xclk_freq);
+	if (ret) {
+		dev_err(dev, "could not get xclk frequency\n");
+		return ret;
+	}
+
 	sensor->xclk_freq = clk_get_rate(sensor->xclk);
+	dev_err(dev, "Check before xclk is: %d Hz\n", sensor->xclk_freq);
+	ret = clk_set_rate(sensor->xclk, xclk_freq);
+	if (ret) {
+		dev_err(dev, "could not set xclk frequency\n");
+		return ret;
+	}
+	sensor->xclk_freq = clk_get_rate(sensor->xclk);
+	dev_err(dev, "Check after xclk is: %d Hz\n", sensor->xclk_freq);
+
 	if (sensor->xclk_freq < OV5640_XCLK_MIN ||
 	    sensor->xclk_freq > OV5640_XCLK_MAX) {
 		dev_err(dev, "xclk frequency out of range: %d Hz\n",
