From 82f1eb0942f9b7589c00904010747f898723209c Mon Sep 17 00:00:00 2001
From: Sakari Ailus <sakari.ailus@iki.fi>
Date: Sat, 30 Nov 2013 22:51:15 +0200
Subject: [PATCH 01/30] of: Add a function to read 64-bit arrays

Implement of_property_read_u64_array() for reading 64-bit arrays.

This is needed for e.g. reading the valid link frequencies in the smiapp
driver.

Signed-off-by: Sakari Ailus <sakari.ailus@iki.fi>
---
 drivers/of/base.c  | 44 ++++++++++++++++++++++++++++++++++++--------
 include/linux/of.h |  3 +++
 2 files changed, 39 insertions(+), 8 deletions(-)

diff --git a/drivers/of/base.c b/drivers/of/base.c
index 3823edf2d012..eac5d7885e0f 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -1223,6 +1223,41 @@ int of_property_read_u32_array(const struct device_node *np,
 EXPORT_SYMBOL_GPL(of_property_read_u32_array);
 
 /**
+ * of_property_read_u64_array - Find and read an array of 64 bit integers
+ * from a property.
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_values:	pointer to return value, modified only if return value is 0.
+ * @sz:		number of array elements to read
+ *
+ * Search for a property in a device node and read 64-bit value(s) from
+ * it. Returns 0 on success, -EINVAL if the property does not exist,
+ * -ENODATA if property does not have a value, and -EOVERFLOW if the
+ * property data isn't large enough.
+ *
+ * The out_values is modified only if a valid u32 value can be decoded.
+ */
+int of_property_read_u64_array(const struct device_node *np,
+			       const char *propname, u64 *out_value, size_t sz)
+{
+	const __be32 *val = of_find_property_value_of_size(
+		np, propname, sz * sizeof(*out_value));
+
+	if (IS_ERR(val))
+		return PTR_ERR(val);
+
+	while (sz--) {
+		*out_value = of_read_number(val, 2);
+		out_value++;
+		val += 2;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(of_property_read_u64_array);
+
+/**
  * of_property_read_u64 - Find and read a 64 bit integer from a property
  * @np:		device node from which the property value is to be read.
  * @propname:	name of the property to be searched.
@@ -1238,14 +1273,7 @@ EXPORT_SYMBOL_GPL(of_property_read_u32_array);
 int of_property_read_u64(const struct device_node *np, const char *propname,
 			 u64 *out_value)
 {
-	const __be32 *val = of_find_property_value_of_size(np, propname,
-						sizeof(*out_value));
-
-	if (IS_ERR(val))
-		return PTR_ERR(val);
-
-	*out_value = of_read_number(val, 2);
-	return 0;
+	return of_property_read_u64_array(np, propname, out_value, 1);
 }
 EXPORT_SYMBOL_GPL(of_property_read_u64);
 
diff --git a/include/linux/of.h b/include/linux/of.h
index 29f0adc5f3e4..95180e4f0fc6 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -263,6 +263,9 @@ extern int of_property_read_u32_array(const struct device_node *np,
 				      size_t sz);
 extern int of_property_read_u64(const struct device_node *np,
 				const char *propname, u64 *out_value);
+extern int of_property_read_u64_array(const struct device_node *np,
+				      const char *propname, u64 *out_value,
+				      size_t sz);
 
 extern int of_property_read_string(struct device_node *np,
 				   const char *propname,
-- 
2.1.4

